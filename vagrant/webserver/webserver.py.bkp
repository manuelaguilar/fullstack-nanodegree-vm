#!/usr/bin/python
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
import cgi

class WebServerHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        try:
            if self.path.endswith("/hello"):
                self.send_response(200)
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                message = ""
                message += "<html><body>Hello!<form action='/hola' enctype='multipart/form-data' method=POST><h1>Type something<input name='message' type='text'><input type='submit' value='Submit'/></h1></form></body></html>"
                self.wfile.write(message)
                print message
                return
            if self.path.endswith("/hola"):
                self.send_response(200)
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                message = ""
                message += "<html><body>&#161;Hola! <a href=\"/hello\">Hello again</a></body></html>"
                self.wfile.write(message)
                print message
                return
            raise IOError
        except IOError as error:
            self.send_error(404, 'File Not Found: %s' % self.path)
    def do_POST(self):
        try:
            self.send_response(301)
            self.end_headers()
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'multipart/form-data':
                print "Processing form" 
                fields=cgi.parse_multipart(self.rfile, pdict)
                messagecontent = fields.get('message')
            output = ""
            output += "<html><body><h2>And here is the response: </h2>" 
            output += "<h1> %s </h1>"  % messagecontent[0]
            self.wfile.write(output)
            return
        except IOError as error:
            print error.strerror
            self.send_error(404, 'File Not Found: %s' % self.path)
    
def main():
    try:
        port = 8080
        server = HTTPServer(('', port), WebServerHandler)
        print "Web Server running on port %s" % port
        server.serve_forever()
    except KeyboardInterrupt:
        print " ^C entered, stopping web server...."
        server.socket.close()

if __name__ == '__main__':
    main()
